-#coding:utf-8
!!! 5
-srand(0)
-require "problem"
%html
  %head
    %meta{ :charset=>'utf-8' }
    %title=TITLE
    :css
      @import url('https://fonts.googleapis.com/css?family=Anonymous+Pro');
      body, textarea {
        font-family: sans-serif;
        font-size:11pt;
      }
      textarea {
        font-size:7pt;
        width:80%;
        height:7em;
      }
      div.svg{
        background-color:white;
      }
      ul * {
        line-height:160%;
      }
      td.center{ text-align:center; }
      tr:nth-child(even) { background-color: #fafafa }
      tr:nth-child(odd) { background-color: #f0f0f0 }
      code {
        background-color: #d8d8d8;
        font-family:monospace;
        padding:2pt 2pt 2pt 2pt ;
        margin:1pt 1pt 1pt 1pt ;
        border-radius:4px;
      }
      h1{
        border-top : solid 2px #bbb;
        border-left : solid 16px #bbb;
        background-color: #f8f8f8;
      }
      h2{
        border-top : solid 2px #bbb;
        border-left : solid 8px #bbb;
        background-color: #f8f8f8;
      }
      code.src, code.expected{
        word-break: break-all;
        font-family:"Ricty","Consolas","Courier New";
      }
  %body
    %h1=TITLE
  -w = FIELD_W
  -h = FIELD_H
  -gap = 1
  -ch=h+gap*2
  -cw=w+gap*2
  -tw = 600
  -stroke_w = 2.0*ch/tw
  -th = 1.0*tw * ch / cw
  -fg = 3.0*ch/tw
  -dash = ([1.0*ch/tw]*2).join(",")
  - SAMPLES.each.with_index(0) do |src,ix|
    %h2
      %a{ name:ix } ##{ix}
    src:
    %code=src
    &nbsp;
    expected:
    %code=solve(src)
    %br{clear:"all"}
    %div.svg
      %svg{ width:"#{tw}px", height:"#{th}px",  viewBox:"#{-gap} #{-gap} #{w+gap*2} #{h+gap*2}" }
        %defs
          %radialGradient{ id:"green", cx:0, cy:0, r:1 }
            %stop{ offset:"0%", "stop-color"=>"#2f2" }
            %stop{ offset:"100%", "stop-color"=>"#afa" }
        %g{ "font-size"=>1.6, "font-family"=>"'Anonymous Pro', monospace", "text-anchor"=>"middle", fill:"black" }
          -clean_rects = listup(src)
          %g{ fill:"url(#green)" }
            -clean_rects.each do |rect|
              %rect{ width:rect.w-fg*2, height:rect.h-fg*2, x:rect.x+fg, y:rect.y+fg}
          %g{ style:"fill:none;stroke-width:#{stroke_w}", stroke:"black" }
            -src.split("/").each do |srect|
              -rect = new_rect(srect)
              %rect{ width:rect.w, height:rect.h, x:rect.x, y:rect.y }
          %g{ style:"stroke-width:#{stroke_w/4}", "stroke-dasharray"=>dash, stroke:"black" }
            -(w+1).times do |x|
              %line{ x1:x, x2:x, y1:0, y2:h }
            -(h+1).times do |y|
              %line{ x1:0, x2:w, y1:y, y2:y }
          %g{}
            -clean_rects.each do |rect|
              -c=rect.center
              %text{ x:c.real+0.1, y:c.imag+0.6 }=rect.size